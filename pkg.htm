<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Aaj News Thumbnail for Packages</title>
  <style>
    body {
      margin: 0;
      background-color: #202447;
	  color: #fff;
    }
    #canvasContainer {
      position: relative;
      width: 1920px;
      height: 1080px;
      margin: 0 auto;
      overflow: hidden;
    }
    canvas {
      display: block;
      background: transparent;
    }
    #controls {
      text-align: center;
      margin-top: 20px;
    }
    button, input {
      margin: 5px;
      padding: 10px;
      font-size: 16px;
    }
    .slider-container {
      margin-top: 20px;
    }
    .slider-container label {
      display: block;
      margin: 5px 0;
    }
  </style>
</head>
<body>

<div id="canvasContainer">
  <button onclick="scaleImage(0, 1.1)">Zoom In Image 1</button>
  <button onclick="scaleImage(0, 0.9)">Zoom Out Image 1</button>
  <button onclick="scaleImage(1, 1.1)">Zoom In Image 2</button>
  <button onclick="scaleImage(1, 0.9)">Zoom Out Image 2</button>
  
  <canvas id="newsCanvas" width="1920" height="1080"></canvas>
</div>

<div id="controls">
  <input type="file" id="uploadImage1" accept="image/*">
  <input type="file" id="uploadImage2" accept="image/*"><br>
  
  <input type="text" id="headlineInput" placeholder="Enter headline" size="100">
  <br><br>

  <div class="slider-container">

	<label for="firstLineCount">First Line Word Count: </label>
    <input type="number" id="firstLineCount" value="12"><br><br>

    <label for="headlineX">Headline X: </label>
    <input type="range" id="headlineX" min="0" max="1920" value="1570">
    <span id="headlineXLabel">1900</span><br><br>
    
    <label for="headlineY">Headline Y: </label>
    <input type="range" id="headlineY" min="0" max="1080" value="50">
    <span id="headlineYLabel">50</span><br><br>
    
    <label for="wordSpacing">Word Spacing (px): </label>
    <input type="number" id="wordSpacing" value="-10"><br><br>

    <label for="fontSize">Font Size (px): </label>
    <input type="number" id="fontSize" value="160"><br><br>

    <label for="lineHeight">Line Height (multiplier): </label>
    <input type="number" id="lineHeight" step="0.1" value="1.2"><br><br>

  </div>

  <button id="updateCanvasButton">Update...!</button>
  <button id="downloadButton">Download Image</button>
</div>


<script>
const canvas = document.getElementById('newsCanvas');
const ctx = canvas.getContext('2d');

const logo = new Image();
logo.src = 'round-logo.png';
logo.onload = function() {
  drawAll(); 
};


const headlineInput = document.getElementById('headlineInput');
const headlineXInput = document.getElementById('headlineX');
const headlineYInput = document.getElementById('headlineY');



let images = [null, null];
let imagePositions = [
  { x: 0, y: 0, scale: 1, dragging: false, offsetX: 0, offsetY: 0 },
  { x: 0, y: 0, scale: 1, dragging: false, offsetX: 0, offsetY: 0 }
];

// Fixed frame areas
const frames = [
  { x: 0, y: 360, width: 960, height: 780 },
  { x: 960, y: 360, width: 960, height: 780 }
];

// Upload images
document.getElementById('uploadImage1').addEventListener('change', (e) => loadImage(e, 0));
document.getElementById('uploadImage2').addEventListener('change', (e) => loadImage(e, 1));

function loadImage(e, index) {
  const file = e.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function(evt) {
      const img = new Image();
      img.onload = function() {
        images[index] = img;

        // Center the image inside the frame initially
        const aspectRatio = img.width / img.height;
        const frame = frames[index];
        const frameRatio = frame.width / frame.height;
        
        let startX = 0;
        let startY = 0;

        if (aspectRatio > frameRatio) {
          // Image is wider
          const displayWidth = frame.height * aspectRatio;
          startX = frame.x + (frame.width - displayWidth) / 2;
          startY = frame.y;
        } else {
          // Image is taller
          const displayHeight = frame.width / aspectRatio;
          startX = frame.x;
          startY = frame.y + (frame.height - displayHeight) / 2;
        }

        imagePositions[index].x = startX;
        imagePositions[index].y = startY;
        imagePositions[index].scale = 1;

        drawAll();
      }
      img.src = evt.target.result;
    }
    reader.readAsDataURL(file);
  }
}

// Zoom function
function scaleImage(index, factor) {
  imagePositions[index].scale *= factor;
  drawAll();
}

// Drag functionality
let isMouseDown = false;
let dragImageIndex = -1;

canvas.addEventListener('mousedown', (e) => {
  const mouseX = e.offsetX;
  const mouseY = e.offsetY;
  
  for (let i = 0; i < 2; i++) {
    const imgPos = imagePositions[i];
    const img = images[i];
    const scaledWidth = img.width * imgPos.scale;
    const scaledHeight = img.height * imgPos.scale;
    
    if (
      mouseX >= imgPos.x && mouseX <= imgPos.x + scaledWidth &&
      mouseY >= imgPos.y && mouseY <= imgPos.y + scaledHeight
    ) {
      isMouseDown = true;
      dragImageIndex = i;
      imgPos.offsetX = mouseX - imgPos.x;
      imgPos.offsetY = mouseY - imgPos.y;
      break;
    }
  }
});

canvas.addEventListener('mousemove', (e) => {
  if (isMouseDown && dragImageIndex !== -1) {
    const imgPos = imagePositions[dragImageIndex];
    imgPos.x = e.offsetX - imgPos.offsetX;
    imgPos.y = e.offsetY - imgPos.offsetY;
    drawAll();
  }
});

canvas.addEventListener('mouseup', () => {
  isMouseDown = false;
  dragImageIndex = -1;
});

canvas.addEventListener('mouseout', () => {
  isMouseDown = false;
  dragImageIndex = -1;
});

// Draw everything
function drawAll() {
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  
  // Create gradient for the canvas background
  const gradient = ctx.createLinearGradient(0, 0, 0, 200); // Top to Bottom gradient
  gradient.addColorStop(0, '#303569');  // Dark color at the top
  gradient.addColorStop(1, '#202447');  // Lighter color at the bottom
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, canvas.width, canvas.height); // Apply gradient as background
  
  for (let i = 0; i < 2; i++) {
    if (images[i]) {
      const img = images[i];
      const pos = imagePositions[i];
      const frame = frames[i];

      ctx.save();
      ctx.beginPath();
      ctx.rect(frame.x, frame.y, frame.width, frame.height);
      ctx.clip();

      const scaledWidth = img.width * pos.scale;
      const scaledHeight = img.height * pos.scale;

      ctx.drawImage(img, pos.x, pos.y, scaledWidth, scaledHeight);

      ctx.restore();
    }
  }
  
  drawWrappedText(headlineInput.value);

  if (logo.complete) {
  ctx.drawImage(logo, -240, canvas.height - logo.height - (-120));
}
}

// Split text into words including special characters for Urdu
function splitWords(text) {
  return text.match(/<[^>]+>|[^<>؀-ۿ]+|[؀-ۿ]+/g) || [];
}

function drawWrappedText(text) {
  ctx.save();

  const fontSize = parseInt(document.getElementById('fontSize').value) || 160;
  const lineHeightMultiplier = parseFloat(document.getElementById('lineHeight').value) || 1.2;
  const wordSpacing = parseInt(document.getElementById('wordSpacing').value) || -20;
  const firstLineCount = parseInt(document.getElementById('firstLineCount').value) || 12;

  ctx.font = `bold ${fontSize}px "Alvi Lahori Nastaleeq", "Noto Nastaliq Urdu", serif`;
  ctx.textAlign = 'right';
  ctx.textBaseline = 'top';
  ctx.direction = 'rtl';

  const words = splitWords(text);
  const lines = [];

  if (firstLineCount > 0 && words.length > firstLineCount) {
    lines.push(words.slice(0, firstLineCount));
    lines.push(words.slice(firstLineCount));
  } else {
    lines.push(words);
  }

  const startX = parseInt(document.getElementById('headlineX').value) || 1900;
  const startY = parseInt(document.getElementById('headlineY').value) || 50;
  const lineHeight = fontSize * lineHeightMultiplier;

  lines.forEach((lineWords, index) => {
    let totalWidth = 0;
    lineWords.forEach(word => {
      totalWidth += ctx.measureText(word.replace(/[<>]/g, '')).width + wordSpacing;
    });

    let x = startX;

    lineWords.forEach(word => {
      const isHighlight = word.startsWith('<') && word.endsWith('>');
      const cleanWord = word.replace(/[<>]/g, '');

      ctx.strokeStyle = '#900000';
      ctx.lineWidth = 4;
      ctx.strokeText(cleanWord, x, startY + index * lineHeight);

      ctx.fillStyle = isHighlight ? '#fff000' : 'white';
      ctx.fillText(cleanWord, x, startY + index * lineHeight);

      x -= ctx.measureText(cleanWord).width + wordSpacing;
    });
  });

  ctx.restore();
}


// Event listener for the "Update" button
document.getElementById('updateCanvasButton').addEventListener('click', () => {
  drawAll();
});

// Update labels when sliders change
headlineXInput.addEventListener('input', function() {
  document.getElementById('headlineXLabel').textContent = this.value;
  drawAll();
});

headlineYInput.addEventListener('input', function() {
  document.getElementById('headlineYLabel').textContent = this.value;
  drawAll();
});

// Event listener for the "Download" button
document.getElementById('downloadButton').addEventListener('click', () => {
  const link = document.createElement('a');
  link.download = 'thumbnail.png';
  link.href = canvas.toDataURL('image/png');
  link.click();
});



</script>
</body>
</html>
